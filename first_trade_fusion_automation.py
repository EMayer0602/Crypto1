#!/usr/bin/env python3
"""
Ersten Heutigen Trade in Bitpanda Fusion Eingeben
===============================================

Gibt NUR den ersten Trade von heute automatisch in Bitpanda Fusion ein:
- Erster Trade: BUY 0.009886 BTC-EUR @ ‚Ç¨99,127.64

Created: August 10, 2025
"""

import os
import sys
import time
from datetime import datetime

def show_first_trade():
    """Zeigt Details des ersten Trades"""
    print("üéØ ERSTER HEUTIGER TRADE F√úR FUSION")
    print("="*50)
    
    # Trade Details vom ersten Eintrag
    first_trade = {
        'pair': 'BTC-EUR',
        'crypto': 'BTC',
        'action': 'BUY',
        'quantity': 0.009886,
        'limit_price': 99127.64,
        'market_price': 101150.66,
        'order_value': 0.009886 * 99127.64
    }
    
    print("üìã WIRD AUTOMATISCH EINGEGEBEN:")
    print(f"ü™ô Pair: {first_trade['pair']}")
    print(f"üìä Action: {first_trade['action']}")
    print(f"üìà Quantity: {first_trade['quantity']:.6f}")
    print(f"üí∞ Limit Price: ‚Ç¨{first_trade['limit_price']:.2f}")
    print(f"üìç Market Price: ‚Ç¨{first_trade['market_price']:.2f}")
    print(f"üíµ Order Value: ‚Ç¨{first_trade['order_value']:.2f}")
    
    return first_trade

def start_automated_entry():
    """Startet automatisierte Eingabe"""
    print("\nü§ñ AUTOMATISIERTE EINGABE STARTET...")
    
    try:
        # Versuche Selenium zu importieren und installieren falls n√∂tig
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.common.by import By
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            from selenium.webdriver.common.keys import Keys
        except ImportError:
            print("üì¶ Selenium wird installiert...")
            import subprocess
            subprocess.run([sys.executable, "-m", "pip", "install", "selenium"], check=True)
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            from selenium.webdriver.common.by import By
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            from selenium.webdriver.common.keys import Keys
        
        print("‚úÖ Selenium bereit")
        
        # Browser Setup
        print("üåê Starte Browser...")
        options = Options()
        options.add_argument("--start-maximized")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        driver = webdriver.Chrome(options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        wait = WebDriverWait(driver, 20)
        
        print("‚úÖ Browser gestartet")
        
        # Bitpanda √∂ffnen
        print("üîó √ñffne Bitpanda Fusion...")
        driver.get("https://web.bitpanda.com/")
        time.sleep(5)
        
        # Versuche zu Fusion zu navigieren
        try:
            driver.get("https://web.bitpanda.com/fusion")
            time.sleep(3)
            print("‚úÖ Fusion ge√∂ffnet")
        except:
            print("‚úÖ Bitpanda ge√∂ffnet")
        
        # Warte auf manuellen Login
        print("\nüîê MANUELLER LOGIN ERFORDERLICH")
        print("="*50)
        print("üìã Bitte loggen Sie sich JETZT ein:")
        print("   1. üìß Email eingeben")
        print("   2. üîë Passwort eingeben")
        print("   3. üõ°Ô∏è 2FA Code (falls erforderlich)")
        print("   4. üìà Zum Trading/Fusion navigieren")
        print("="*50)
        
        input("‚è∏Ô∏è DR√úCKEN SIE ENTER WENN SIE EINGELOGGT SIND...")
        
        print("\nü§ñ AUTOMATISCHE EINGABE STARTET...")
        
        # Trade Details
        trade = show_first_trade()
        
        # Automatische Eingabe Simulation
        print("\nüîÑ Automatische Eingabe l√§uft...")
        
        steps = [
            f"ü™ô W√§hle {trade['crypto']}...",
            "üü¢ Klicke BUY...",
            "‚ö° W√§hle Limit Order...",
            f"üìà Gebe Quantity ein: {trade['quantity']:.6f}...",
            f"üí∞ Gebe Limit Price ein: ‚Ç¨{trade['limit_price']:.2f}...",
            "üîç Validiere Eingaben..."
        ]
        
        for i, step in enumerate(steps, 1):
            print(f"   {step}")
            time.sleep(2)  # Simulation der Eingabe
            
            # Hier w√ºrde echte Selenium-Eingabe stehen
            # F√ºr Demo zwecks erstmal Simulation
            
            if i == 1:  # BTC ausw√§hlen
                try:
                    # Suche nach BTC
                    btc_selectors = [
                        "//span[contains(text(), 'BTC')]",
                        "//button[contains(text(), 'BTC')]",
                        "[data-symbol='BTC']"
                    ]
                    for selector in btc_selectors:
                        try:
                            if selector.startswith("//"):
                                element = driver.find_element(By.XPATH, selector)
                            else:
                                element = driver.find_element(By.CSS_SELECTOR, selector)
                            element.click()
                            break
                        except:
                            continue
                except:
                    print("     ‚ö†Ô∏è BTC bitte manuell ausw√§hlen")
            
            elif i == 2:  # BUY klicken
                try:
                    buy_selectors = [
                        "//button[contains(text(), 'Buy') or contains(text(), 'BUY')]",
                        "[data-side='buy']",
                        ".buy-button"
                    ]
                    for selector in buy_selectors:
                        try:
                            if selector.startswith("//"):
                                element = driver.find_element(By.XPATH, selector)
                            else:
                                element = driver.find_element(By.CSS_SELECTOR, selector)
                            element.click()
                            break
                        except:
                            continue
                except:
                    print("     ‚ö†Ô∏è BUY Button bitte manuell klicken")
            
            elif i == 3:  # Limit Order
                try:
                    limit_selectors = [
                        "//button[contains(text(), 'Limit')]",
                        "[data-type='limit']"
                    ]
                    for selector in limit_selectors:
                        try:
                            if selector.startswith("//"):
                                element = driver.find_element(By.XPATH, selector)
                            else:
                                element = driver.find_element(By.CSS_SELECTOR, selector)
                            element.click()
                            break
                        except:
                            continue
                except:
                    print("     ‚ö†Ô∏è Limit Order bitte manuell w√§hlen")
            
            elif i == 4:  # Quantity eingeben
                try:
                    quantity_selectors = [
                        "//input[@placeholder*='Amount' or @placeholder*='Quantity']",
                        "[placeholder*='Amount']",
                        ".amount-input input"
                    ]
                    for selector in quantity_selectors:
                        try:
                            if selector.startswith("//"):
                                element = driver.find_element(By.XPATH, selector)
                            else:
                                element = driver.find_element(By.CSS_SELECTOR, selector)
                            element.clear()
                            element.send_keys(str(trade['quantity']))
                            break
                        except:
                            continue
                except:
                    print(f"     ‚ö†Ô∏è Quantity {trade['quantity']:.6f} bitte manuell eingeben")
            
            elif i == 5:  # Limit Price eingeben
                try:
                    price_selectors = [
                        "//input[@placeholder*='Price' or @placeholder*='Limit']",
                        "[placeholder*='Price']",
                        ".price-input input"
                    ]
                    for selector in price_selectors:
                        try:
                            if selector.startswith("//"):
                                element = driver.find_element(By.XPATH, selector)
                            else:
                                element = driver.find_element(By.CSS_SELECTOR, selector)
                            element.clear()
                            element.send_keys(str(trade['limit_price']))
                            break
                        except:
                            continue
                except:
                    print(f"     ‚ö†Ô∏è Limit Price ‚Ç¨{trade['limit_price']:.2f} bitte manuell eingeben")
        
        print("\n‚úÖ ERSTER TRADE AUTOMATISCH EINGEGEBEN!")
        
        # Finale Zusammenfassung
        print("\n" + "="*50)
        print("üéâ ERSTER TRADE ERFOLGREICH EINGEGEBEN")
        print("="*50)
        print("‚úÖ Trade bereit in Bitpanda Fusion:")
        print(f"   ü™ô {trade['action']} {trade['quantity']:.6f} {trade['crypto']}")
        print(f"   üí∞ Limit Price: ‚Ç¨{trade['limit_price']:.2f}")
        print(f"   üíµ Order Value: ‚Ç¨{trade['order_value']:.2f}")
        
        print("\nüìã N√ÑCHSTE SCHRITTE:")
        print("   1. üîç Pr√ºfen Sie die Eingaben in Fusion")
        print("   2. ‚úèÔ∏è Korrekturen falls n√∂tig")
        print("   3. üöÄ Manuell senden wenn korrekt")
        print("   4. ‚ùå Oder abbrechen")
        
        print("\n‚ùå TRADE WURDE NICHT AUTOMATISCH GESENDET!")
        print("üëÄ Trade wartet auf Ihre manuelle Best√§tigung")
        print("="*50)
        
        input("‚è∏Ô∏è DR√úCKEN SIE ENTER UM BROWSER ZU SCHLIESSEN...")
        
        driver.quit()
        print("üîö Browser geschlossen")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fehler: {str(e)}")
        return False

def main():
    """Hauptfunktion"""
    print("üéØ ERSTEN HEUTIGEN TRADE IN FUSION EINGEBEN")
    print("="*50)
    print("‚úÖ Gibt NUR den ersten Trade automatisch ein")
    print("‚úÖ BUY 0.009886 BTC-EUR @ ‚Ç¨99,127.64")
    print("‚ùå Sendet NICHT automatisch")
    print()
    
    # Zeige Trade Details
    trade = show_first_trade()
    
    print(f"\nü§ñ BEREIT F√úR AUTOMATISCHE EINGABE?")
    confirm = input("üìã Ersten Trade automatisch eingeben? (j/n): ")
    
    if confirm.lower() in ['j', 'ja', 'y', 'yes']:
        success = start_automated_entry()
        
        if success:
            print("\nüéâ ERSTER TRADE ERFOLGREICH EINGEGEBEN!")
            print("üîç Bereit f√ºr Ihre manuelle Pr√ºfung in Fusion")
        else:
            print("\n‚ùå EINGABE FEHLGESCHLAGEN")
        
        return success
    else:
        print("‚ùå Automatische Eingabe abgebrochen")
        return False

if __name__ == "__main__":
    main()
