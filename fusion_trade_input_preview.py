#!/usr/bin/env python3
"""
Bitpanda Fusion - Ersten Trade eingeben (NICHT SENDEN)
====================================================

Gibt den ersten heutigen Trade in die Bitpanda Fusion Oberfl√§che ein,
sendet ihn aber NICHT ab, so dass Sie ihn in der Oberfl√§che pr√ºfen k√∂nnen.

Created: August 10, 2025
"""

import os
import sys
import pandas as pd
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys

class BitpandaFusionTradeInput:
    """Gibt Trade in Bitpanda Fusion ein ohne zu senden"""
    
    def __init__(self):
        self.driver = None
        self.wait = None
        self.first_trade = None
        
    def load_first_trade(self):
        """L√§dt den ersten Trade von heute"""
        print("üìã Lade ersten heutigen Trade...")
        
        # Suche nach der heutigen Trades-Datei
        trades_file = "TODAY_ONLY_trades_20250810_093857.csv"
        
        if not os.path.exists(trades_file):
            print(f"‚ùå Datei nicht gefunden: {trades_file}")
            return False
        
        try:
            df = pd.read_csv(trades_file, delimiter=';')
            print(f"‚úÖ {len(df)} Trades geladen")
            
            if len(df) == 0:
                print("‚ùå Keine Trades in Datei")
                return False
            
            # Nimm den ersten Trade (BTC Buy)
            first_row = df.iloc[0]
            
            self.first_trade = {
                'date': first_row['Date'],
                'ticker': first_row['Ticker'],
                'quantity': float(first_row['Quantity']),
                'price': float(first_row['Price']),
                'order_type': first_row['Order Type'],
                'limit_price': float(first_row['Limit Price']),
                'action': 'Buy',  # Da es ein "Open" ist
                'realtime_price': float(first_row['Realtime Price Bitpanda'])
            }
            
            print(f"üéØ Erster Trade geladen:")
            print(f"   üìä {self.first_trade['action']} {self.first_trade['quantity']:.6f} {self.first_trade['ticker']}")
            print(f"   üí∞ Limit Price: ‚Ç¨{self.first_trade['limit_price']:.4f}")
            print(f"   üìà Current Price: ‚Ç¨{self.first_trade['realtime_price']:.4f}")
            print(f"   üíµ Order Value: ‚Ç¨{self.first_trade['quantity'] * self.first_trade['limit_price']:.2f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Fehler beim Laden: {str(e)}")
            return False
    
    def setup_browser(self):
        """Setup Chrome Browser f√ºr Bitpanda Fusion"""
        print("üåê Setup Chrome Browser...")
        
        try:
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # Starte Browser
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            self.wait = WebDriverWait(self.driver, 20)
            
            print("‚úÖ Browser gestartet")
            return True
            
        except Exception as e:
            print(f"‚ùå Browser Setup Fehler: {str(e)}")
            print("üí° Bitte ChromeDriver installieren: https://chromedriver.chromium.org/")
            return False
    
    def login_to_fusion(self):
        """Login zu Bitpanda Fusion"""
        print("üîê √ñffne Bitpanda Fusion Login...")
        
        try:
            # √ñffne Bitpanda Fusion
            self.driver.get("https://fusion.bitpanda.com/")
            time.sleep(3)
            
            print("‚úÖ Bitpanda Fusion ge√∂ffnet")
            print("üîê MANUELLER LOGIN ERFORDERLICH!")
            print("üìã Bitte loggen Sie sich manuell ein und dr√ºcken Sie dann ENTER...")
            
            # Warte auf manuellen Login
            input("‚è∏Ô∏è Dr√ºcken Sie ENTER nachdem Sie eingeloggt sind...")
            
            # Pr√ºfe ob Login erfolgreich
            time.sleep(2)
            
            # Suche nach Trading-Bereich
            try:
                # Verschiedene m√∂gliche Selektoren f√ºr den Trading-Bereich
                trading_selectors = [
                    "//a[contains(text(), 'Trade')]",
                    "//a[contains(text(), 'Trading')]",
                    "//button[contains(text(), 'Trade')]",
                    "[data-testid*='trade']",
                    "[href*='trade']"
                ]
                
                for selector in trading_selectors:
                    try:
                        if selector.startswith("//"):
                            element = self.driver.find_element(By.XPATH, selector)
                        else:
                            element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if element:
                            print("‚úÖ Trading-Bereich gefunden")
                            break
                    except:
                        continue
            except:
                pass
            
            print("‚úÖ Login erfolgreich (angenommen)")
            return True
            
        except Exception as e:
            print(f"‚ùå Login Fehler: {str(e)}")
            return False
    
    def navigate_to_trading(self):
        """Navigiert zum Trading-Bereich"""
        print("üìà Navigiere zum Trading-Bereich...")
        
        try:
            # Suche nach Trading/Trade Link
            trading_links = [
                "//a[contains(text(), 'Trade')]",
                "//a[contains(text(), 'Trading')]", 
                "//button[contains(text(), 'Trade')]",
                "//nav//a[contains(@href, 'trade')]"
            ]
            
            for link_xpath in trading_links:
                try:
                    trade_link = self.wait.until(EC.element_to_be_clickable((By.XPATH, link_xpath)))
                    trade_link.click()
                    time.sleep(3)
                    print("‚úÖ Trading-Bereich ge√∂ffnet")
                    return True
                except:
                    continue
            
            print("‚ö†Ô∏è Trading-Link nicht automatisch gefunden")
            print("üìã Bitte navigieren Sie manuell zum Trading-Bereich und dr√ºcken ENTER...")
            input("‚è∏Ô∏è Dr√ºcken Sie ENTER wenn Sie im Trading-Bereich sind...")
            return True
            
        except Exception as e:
            print(f"‚ùå Navigation Fehler: {str(e)}")
            return False
    
    def select_crypto_pair(self):
        """W√§hlt das Crypto-Paar aus"""
        ticker = self.first_trade['ticker']  # z.B. "BTC-EUR"
        
        print(f"ü™ô W√§hle Crypto-Paar: {ticker}...")
        
        try:
            # M√∂gliche Selektoren f√ºr Paar-Auswahl
            pair_selectors = [
                f"//span[contains(text(), '{ticker}')]",
                f"//button[contains(text(), '{ticker}')]",
                f"//option[contains(text(), '{ticker}')]",
                f"[data-symbol='{ticker}']",
                f"[value='{ticker}']"
            ]
            
            for selector in pair_selectors:
                try:
                    if selector.startswith("//"):
                        element = self.wait.until(EC.element_to_be_clickable((By.XPATH, selector)))
                    else:
                        element = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                    element.click()
                    time.sleep(2)
                    print(f"‚úÖ {ticker} ausgew√§hlt")
                    return True
                except:
                    continue
            
            print(f"‚ö†Ô∏è {ticker} nicht automatisch gefunden")
            print(f"üìã Bitte w√§hlen Sie manuell {ticker} aus und dr√ºcken ENTER...")
            input("‚è∏Ô∏è Dr√ºcken Sie ENTER wenn das richtige Paar ausgew√§hlt ist...")
            return True
            
        except Exception as e:
            print(f"‚ùå Paar-Auswahl Fehler: {str(e)}")
            return False
    
    def input_trade_details(self):
        """Gibt die Trade-Details ein"""
        print("üìù Gebe Trade-Details ein...")
        
        action = self.first_trade['action']
        quantity = self.first_trade['quantity']
        limit_price = self.first_trade['limit_price']
        
        print(f"üìä {action}: {quantity:.6f} @ ‚Ç¨{limit_price:.4f}")
        
        try:
            time.sleep(2)
            
            # 1. BUY Button w√§hlen
            if action == 'Buy':
                buy_selectors = [
                    "//button[contains(text(), 'Buy')]",
                    "//button[contains(text(), 'BUY')]",
                    "//span[contains(text(), 'Buy')]//parent::button",
                    "[data-testid*='buy']",
                    ".buy-button"
                ]
                
                for selector in buy_selectors:
                    try:
                        if selector.startswith("//"):
                            buy_btn = self.driver.find_element(By.XPATH, selector)
                        else:
                            buy_btn = self.driver.find_element(By.CSS_SELECTOR, selector)
                        buy_btn.click()
                        print("‚úÖ Buy-Button gew√§hlt")
                        break
                    except:
                        continue
            
            time.sleep(1)
            
            # 2. Limit Order w√§hlen (falls verf√ºgbar)
            limit_selectors = [
                "//button[contains(text(), 'Limit')]",
                "//span[contains(text(), 'Limit')]",
                "[data-testid*='limit']"
            ]
            
            for selector in limit_selectors:
                try:
                    if selector.startswith("//"):
                        limit_btn = self.driver.find_element(By.XPATH, selector)
                    else:
                        limit_btn = self.driver.find_element(By.CSS_SELECTOR, selector)
                    limit_btn.click()
                    print("‚úÖ Limit Order gew√§hlt")
                    break
                except:
                    continue
            
            time.sleep(1)
            
            # 3. Quantity eingeben
            quantity_selectors = [
                "//input[@placeholder*='Amount' or @placeholder*='Quantity' or @placeholder*='Menge']",
                "//input[contains(@name, 'amount') or contains(@name, 'quantity')]",
                "[placeholder*='Amount']",
                "[placeholder*='Quantity']",
                ".amount-input input",
                ".quantity-input input"
            ]
            
            for selector in quantity_selectors:
                try:
                    if selector.startswith("//"):
                        qty_input = self.driver.find_element(By.XPATH, selector)
                    else:
                        qty_input = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    qty_input.clear()
                    qty_input.send_keys(str(quantity))
                    print(f"‚úÖ Quantity eingegeben: {quantity:.6f}")
                    break
                except:
                    continue
            
            time.sleep(1)
            
            # 4. Limit Price eingeben
            price_selectors = [
                "//input[@placeholder*='Price' or @placeholder*='Preis']",
                "//input[contains(@name, 'price') or contains(@name, 'limit')]",
                "[placeholder*='Price']",
                "[placeholder*='Limit']",
                ".price-input input",
                ".limit-input input"
            ]
            
            for selector in price_selectors:
                try:
                    if selector.startswith("//"):
                        price_input = self.driver.find_element(By.XPATH, selector)
                    else:
                        price_input = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    price_input.clear()
                    price_input.send_keys(str(limit_price))
                    print(f"‚úÖ Limit Price eingegeben: ‚Ç¨{limit_price:.4f}")
                    break
                except:
                    continue
            
            time.sleep(2)
            
            print("‚úÖ Alle Trade-Details eingegeben!")
            return True
            
        except Exception as e:
            print(f"‚ùå Input Fehler: {str(e)}")
            return False
    
    def show_trade_preview(self):
        """Zeigt Trade-Vorschau und wartet auf Benutzer-Best√§tigung"""
        print("\n" + "="*60)
        print("üîç TRADE PREVIEW - NICHT GESENDET!")
        print("="*60)
        
        trade = self.first_trade
        print(f"üìä Action: {trade['action']}")
        print(f"ü™ô Pair: {trade['ticker']}")
        print(f"üìà Quantity: {trade['quantity']:.6f}")
        print(f"üí∞ Limit Price: ‚Ç¨{trade['limit_price']:.4f}")
        print(f"üìç Current Price: ‚Ç¨{trade['realtime_price']:.4f}")
        print(f"üíµ Order Value: ‚Ç¨{trade['quantity'] * trade['limit_price']:.2f}")
        print(f"üìÖ Date: {trade['date']}")
        
        print("\nüîç TRADE IN BITPANDA FUSION EINGEGEBEN")
        print("‚ùå TRADE WURDE NICHT GESENDET!")
        print("üëÄ Bitte pr√ºfen Sie die Eingaben in der Bitpanda Fusion Oberfl√§che")
        
        print("\nüìã N√ÑCHSTE SCHRITTE:")
        print("1. ‚úÖ Pr√ºfen Sie alle Eingaben in der Fusion-Oberfl√§che")
        print("2. ‚úÖ Kontrollieren Sie Quantity und Limit Price")
        print("3. ‚úÖ Bei Bedarf manuell anpassen")
        print("4. üöÄ Manuell senden wenn alles korrekt ist")
        print("5. ‚ùå Oder abbrechen wenn nicht korrekt")
        
        print("="*60)
        print("‚è∏Ô∏è Browser bleibt ge√∂ffnet f√ºr Ihre Pr√ºfung...")
        print("üìã Dr√ºcken Sie ENTER um den Browser zu schlie√üen...")
        
        input()
        return True
    
    def run(self):
        """Hauptausf√ºhrung"""
        print("üöÄ Bitpanda Fusion - Ersten Trade eingeben (NICHT SENDEN)")
        print("="*60)
        
        try:
            # 1. Trade laden
            if not self.load_first_trade():
                return False
            
            # 2. Browser setup
            if not self.setup_browser():
                return False
            
            # 3. Login
            if not self.login_to_fusion():
                return False
            
            # 4. Zum Trading navigieren
            if not self.navigate_to_trading():
                return False
            
            # 5. Crypto-Paar ausw√§hlen
            if not self.select_crypto_pair():
                return False
            
            # 6. Trade-Details eingeben
            if not self.input_trade_details():
                return False
            
            # 7. Preview zeigen (NICHT SENDEN!)
            self.show_trade_preview()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Fehler: {str(e)}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()
                print("üîö Browser geschlossen")

def main():
    """Hauptfunktion"""
    print("üéØ Bitpanda Fusion - Ersten Trade f√ºr Pr√ºfung eingeben")
    print("‚ùå Trade wird NICHT gesendet - nur eingegeben!")
    
    trader = BitpandaFusionTradeInput()
    
    try:
        success = trader.run()
        
        if success:
            print("\n‚úÖ TRADE ERFOLGREICH EINGEGEBEN!")
            print("üîç Trade bereit zur Pr√ºfung in Bitpanda Fusion")
        else:
            print("\n‚ùå FEHLER BEIM EINGEBEN")
        
        return success
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Abgebrochen")
        return False

if __name__ == "__main__":
    main()
